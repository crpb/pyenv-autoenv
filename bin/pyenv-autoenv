#!/usr/bin/env bash
#
# Summary: Create a virtualenv automatically.
#
# Usage: pyenv autoenv [--clear] [--local] [--name NAME] [--python PYTHON]
#        pyenv autoenv --version
#        pyenv autoenv --help
#
# Create a virtualenv with sensible defaults.
#
# Uses the latest available cPython version by default, or the version
# specified by the pyproject.toml file.
#
# The virtualenv is named after the current directory by default.

PYENV_AUTOENV_VERSION="2.1.0"

set -e
[ -n "$PYENV_DEBUG" ] && set -x

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  echo --clear
  echo --name
  echo --python
  echo --no-local
fi

usage() {
    echo "pyenv autoenv [--clear] [--no-local] [--name NAME] [--python PYTHON]";
    echo "pyenv autoenv --version";
    echo "pyenv autoenv --help";
    exit 1;
}

# Define library functions (taken from pyenv-virtualenv)
parse_options() {
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$(($index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "name" )
    VENV_NAME="${ARGUMENTS[0]}"
    ARGUMENTS=("${ARGUMENTS[@]:1}") # shift 1
    ;;
  "python" )
    DESIRED_VENV_PYTHON="${ARGUMENTS[0]}"
    ARGUMENTS=("${ARGUMENTS[@]:1}") # shift 1
    ;;
  "h" | "help" )
    usage 0
    ;;
  "version" )
    echo "${PYENV_AUTOENV_VERSION}";
    exit 0;
    ;;
  "clear" )
    CLEAR=true
    ;;
  "no-local" )
    NO_LOCAL=true
    ;;
  esac
done

if [ -z "${VENV_NAME}" ]; then
  VENV_NAME=$(basename "$(pwd)");
  echo "Picking '${VENV_NAME}' for virtualenv name";
fi

VENV_PYTHON=$(/usr/bin/python3 "${BASH_SOURCE%/*}"/../libexec/detect-version.py "${DESIRED_VENV_PYTHON}")

if pyenv versions --bare | grep -q "^${VENV_NAME}$"; then
  if [ -z "${CLEAR}" ]; then
    echo "Virtualenv '${VENV_NAME}' already exists.";
    echo "Use the flag '--clear' to recreate it.";
    exit 0;
  else
    echo "Clearing previous virtualenv..."
    pyenv virtualenv-delete -f "${VENV_NAME}";
  fi
fi

echo "Using Python version ${VENV_PYTHON}"
pyenv install --skip-existing "$VENV_PYTHON";

echo "Creating new virtualenv '${VENV_NAME}'..."
pyenv virtualenv "${VENV_PYTHON}" "${VENV_NAME}";

if [ -z ${NO_LOCAL} ]; then
  echo "Setting local virtualenv '${VENV_NAME}'..."
  pyenv local "${VENV_NAME}"
fi
